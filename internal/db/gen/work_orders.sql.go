// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: work_orders.sql

package db

import (
	"context"

	"github.com/jackc/pgx/v5/pgtype"
)

const listWorkOrders = `-- name: ListWorkOrders :many
SELECT
    wo.id,
    wo.organisation_id AS org_id,
    wo.title,
    wo.description,
    wo.status,
    wo.priority,
    wo.created_at,
    wo.updated_at
FROM work_order wo
WHERE wo.organisation_id = $1
ORDER BY wo.created_at DESC
LIMIT $2
`

type ListWorkOrdersParams struct {
	OrganisationID pgtype.UUID `db:"organisation_id" json:"organisation_id"`
	Limit          int32       `db:"limit" json:"limit"`
}

type ListWorkOrdersRow struct {
	ID          pgtype.UUID        `db:"id" json:"id"`
	OrgID       pgtype.UUID        `db:"org_id" json:"org_id"`
	Title       string             `db:"title" json:"title"`
	Description pgtype.Text        `db:"description" json:"description"`
	Status      string             `db:"status" json:"status"`
	Priority    string             `db:"priority" json:"priority"`
	CreatedAt   pgtype.Timestamptz `db:"created_at" json:"created_at"`
	UpdatedAt   pgtype.Timestamptz `db:"updated_at" json:"updated_at"`
}

func (q *Queries) ListWorkOrders(ctx context.Context, arg ListWorkOrdersParams) ([]ListWorkOrdersRow, error) {
	rows, err := q.db.Query(ctx, listWorkOrders, arg.OrganisationID, arg.Limit)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []ListWorkOrdersRow
	for rows.Next() {
		var i ListWorkOrdersRow
		if err := rows.Scan(
			&i.ID,
			&i.OrgID,
			&i.Title,
			&i.Description,
			&i.Status,
			&i.Priority,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

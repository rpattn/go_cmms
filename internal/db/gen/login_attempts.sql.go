// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.30.0
// source: login_attempts.sql

package db

import (
	"context"
	"net/netip"
)

const countRecentFailures = `-- name: CountRecentFailures :one
SELECT count(*)::int
FROM login_attempts
WHERE ts >= now() - make_interval(mins => $1::int)
  AND success = false
  AND (username = LOWER($2) OR ip = $3)
`

type CountRecentFailuresParams struct {
	Minutes  int32      `db:"minutes" json:"minutes"`
	Username string     `db:"username" json:"username"`
	Ip       netip.Addr `db:"ip" json:"ip"`
}

func (q *Queries) CountRecentFailures(ctx context.Context, arg CountRecentFailuresParams) (int32, error) {
	row := q.db.QueryRow(ctx, countRecentFailures, arg.Minutes, arg.Username, arg.Ip)
	var column_1 int32
	err := row.Scan(&column_1)
	return column_1, err
}

const recordLoginAttempt = `-- name: RecordLoginAttempt :exec
INSERT INTO login_attempts (username, ip, success)
VALUES (LOWER($1), $2, $3)
`

type RecordLoginAttemptParams struct {
	Lower   string     `db:"lower" json:"lower"`
	Ip      netip.Addr `db:"ip" json:"ip"`
	Success bool       `db:"success" json:"success"`
}

func (q *Queries) RecordLoginAttempt(ctx context.Context, arg RecordLoginAttemptParams) error {
	_, err := q.db.Exec(ctx, recordLoginAttempt, arg.Lower, arg.Ip, arg.Success)
	return err
}
